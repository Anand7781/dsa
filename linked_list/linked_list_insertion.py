# -*- coding: utf-8 -*-
"""Linked_list_insertion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PK3T4yJ093M-AcPN1n3KwL0a7bjJDtS2
"""

class Node:
  def __init__(self , data):
    self.data = data
    self.nextPtr = None

class LinkedList:
  def __init__(self):
    self.head = None

  def insertionAtFront(self,new_data):
    # creation of new node with new_data
    new_node = Node(new_data)
    # updating the next pointer of new_node with head pointer
    new_node.nextPtr = self.head
    # update head with address of current node(new_node)
    self.head = new_node

  def InsertionAtBack(self , new_data):
    # creation of node
    new_node = Node(new_data)

    if self.head is None:
      self.head = new_node
      print("no linked list is present")
      return

    temp = self.head
    while temp.nextPtr:
      temp = temp.nextPtr
    temp.nextPtr = new_node

    # insertion of random place in linked list

  def insertionAtrandom(self , previous_node , new_data):
      if previous_node is None:
        print("the node must be present in the linked list")
        return

      new_node = Node(new_data)
      new_node.nextPtr = previous_node.nextPtr
      previous_node.nextPtr = new_node


  def Printlist(self):
    temp = self.head
    while temp:
      print(temp.data)
      temp = temp.nextPtr

ll = LinkedList()
ll.insertionAtFront(50)
ll.insertionAtFront(40)
ll.insertionAtFront(30)
ll.insertionAtFront(20)
ll.insertionAtFront(10)
ll.InsertionAtBack(30)
print("list before insertion at random")
ll.Printlist()
print("list before insertion at random")
ll.insertionAtrandom(ll.head.nextPtr , 25)
ll.Printlist()